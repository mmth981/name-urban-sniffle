# -*- coding: utf-8 -*-
"""test run app simple.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n3aNomXC_sHDmK_2Sr99ggk7qNgRtZqA
"""

!pip install cryptography
!pip install pysqlite3

import os
pos_system_path = 'pos_system'
subdirectories = ['app.py', 'database.py', 'encryption.py', 'models.py', 'requirements.txt']
os.makedirs(pos_system_path, exist_ok=True)
for subdir in subdirectories:
    os.makedirs(os.path.join(pos_system_path, subdir), exist_ok=True)

from cryptography.fernet import Fernet

# Generate a new key
def generate_key():
    key = Fernet.generate_key()
    with open("secret.key", "wb") as key_file:
        key_file.write(key)

# Load the existing key
def load_key():
    return open("secret.key", "rb").read()

# Generate the key if it doesn't exist
if not os.path.exists("secret.key"):
    generate_key()

# Initialize Fernet
key = load_key()
cipher_suite = Fernet(key)

def encrypt_data(data: str) -> str:
    """Encrypts data using AES encryption."""
    return cipher_suite.encrypt(data.encode()).decode()

def decrypt_data(encrypted_data: str) -> str:
    """Decrypts data."""
    return cipher_suite.decrypt(encrypted_data.encode()).decode()

import os
import sqlite3

# ... (other code) ...

def encrypt_data(data: str) -> str:
    """Encrypts data using AES encryption."""
    return cipher_suite.encrypt(data.encode()).decode()

def decrypt_data(encrypted_data: str) -> str:
    """Decrypts data."""
    return cipher_suite.decrypt(encrypted_data.encode()).decode()

# Initialize database
def init_db():
    conn = sqlite3.connect("pos.db")
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS items (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        price REAL NOT NULL,
        stock INTEGER NOT NULL,
        encrypted_data TEXT NOT NULL
    )
    """)
    conn.commit()
    conn.close()

# Add item
def add_item(name: str, price: float, stock: int):
    encrypted_name = encrypt_data(name)
    conn = sqlite3.connect("pos.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO items (name, price, stock, encrypted_data) VALUES (?, ?, ?, ?)",
                   (encrypted_name, price, stock, encrypt_data(f"{price},{stock}")))
    conn.commit()
    conn.close()

# Get all items
def get_items():
    conn = sqlite3.connect("pos.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, price, stock FROM items")
    rows = cursor.fetchall()
    # Decrypt data
    decrypted_rows = [(row[0], decrypt_data(row[1]), row[2], row[3]) for row in rows]
    conn.close()
    return decrypted_rows

pip install python-dotenv

from dotenv import load_dotenv
import os

load_dotenv()
key = os.getenv("SECRET_KEY")

# Check if SECRET_KEY is set and not empty
if key is None or key == "":
    # If not set, generate a new key and store it as an environment variable
    from cryptography.fernet import Fernet
    key = Fernet.generate_key()
    os.environ["SECRET_KEY"] = key.decode()  # Store key as a string in environment variable
    # Consider saving the key to a .env file for persistence across sessions
    with open(".env", "a") as env_file:
        env_file.write(f"SECRET_KEY={key.decode()}\n")
    print("New SECRET_KEY generated and stored in .env file.")

# Initialize Fernet
cipher_suite = Fernet(key)  # Now, 'key' should be a valid bytes-like object or ASCII string

import os

# Define the base directory and files
pos_system_path = 'pos_system'
files = ['app.py', 'database.py', 'encryption.py', 'models.py', 'requirements.txt']

# Create the directory (if it doesn't exist)
os.makedirs(pos_system_path, exist_ok=True)

# Create empty files in the directory
for file_name in files:
    file_path = os.path.join(pos_system_path, file_name)
    # Check if a file or directory with the same name already exists
    if not os.path.exists(file_path):
        with open(file_path, 'w') as f:
            f.write("")  # Create an empty file
    else:
        print(f"Skipping creation of '{file_name}' as it already exists.")

import os

# Define the base directory and files
pos_system_path = 'pos_system'
files = ['app.py', 'database.py', 'encryption.py', 'models.py', 'requirements.txt']

# Create the directory (if it doesn't exist)
os.makedirs(pos_system_path, exist_ok=True)
print(f"Directory '{pos_system_path}' is ready.")

# Create empty files in the directory
for file_name in files:
    file_path = os.path.join(pos_system_path, file_name)
    if not os.path.exists(file_path):
        with open(file_path, 'w') as f:
            f.write("")  # Create an empty file
        print(f"Created file: {file_path}")
    else:
        print(f"File '{file_name}' already exists. Skipping creation.")

import os

# Define the base directory and files
pos_system_path = 'pos_system'
files = ['app.py', 'database.py', 'encryption.py', 'models.py', 'requirements.txt']

# Create the directory (if it doesn't exist)
os.makedirs(pos_system_path, exist_ok=True)
print(f"Directory '{pos_system_path}' is ready.")

# Create empty files in the directory
for file_name in files:
    file_path = os.path.join(pos_system_path, file_name)
    if not os.path.exists(file_path):
        with open(file_path, 'w') as f:
            f.write("")  # Create an empty file
        print(f"Created file: {file_path}")
    else:
        print(f"File '{file_name}' already exists. Skipping creation.")

# This is a code stub, since you provided no Python code to correct.
# Please provide the Python code you would like corrected.
# Created file: pos_system/encryption.py
# Created file: pos_system/models.py
# Created file: pos_system/requirements.txt

Directory 'pos_system' is ready.
Created file: pos_system/app.py
Created file: pos_system/database.py
Created file: pos_system/encryption.py
Created file: pos_system/models.py
Created file: pos_system/requirements.txt

import os

# Define the base directory and files
pos_system_path = 'pos_system'
files = ['app.py', 'database.py', 'encryption.py', 'models.py', 'requirements.txt']

# Create the directory (if it doesn't exist)
os.makedirs(pos_system_path, exist_ok=True)
print(f"Directory '{pos_system_path}' is ready.")

# Create empty files in the directory
for file_name in files:
    file_path = os.path.join(pos_system_path, file_name)
    if not os.path.exists(file_path):
        with open(file_path, 'w') as f:
            f.write("")  # Create an empty file
        print(f"Created file: {file_path}")
    else:
        print(f"File '{file_name}' already exists. Skipping creation.")

Directory 'pos_system' is ready.
Created file: pos_system/app.py
Created file: pos_system/database.py
Created file: pos_system/encryption.py
Created file: pos_system/models.py
Created file: pos_system/requirements.txt

import os

# Define the base directory and files
pos_system_path = 'pos_system'
files = ['app.py', 'database.py', 'encryption.py', 'models.py', 'requirements.txt']

# Create the directory (if it doesn't exist)
os.makedirs(pos_system_path, exist_ok=True)
print(f"Directory '{pos_system_path}' is ready.")  # This is a valid Python print statement

# Create empty files in the directory
for file_name in files:
    file_path = os.path.join(pos_system_path, file_name)
    if not os.path.exists(file_path):
        with open(file_path, 'w') as f:
            f.write("")  # Create an empty file
        print(f"Created file: {file_path}")
    else:
        print(f"File '{file_name}' already exists. Skipping creation.")

# app.py

from database import init_db, add_item, get_items
from encryption import generate_key, load_key

def main():
    # Step 1: Generate encryption key (only run this once)
    try:
        generate_key()
        print("Encryption key generated and saved to 'secret.key'")
    except FileExistsError:
        print("Encryption key already exists.")

    # Step 2: Initialize the database
    print("\nInitializing database...")
    init_db()
    print("Database initialized successfully.")

    # Step 3: Add sample items to the inventory
    print("\nAdding sample items to the inventory...")
    add_item("Apple", 0.5, 100)
    add_item("Banana", 0.3, 150)
    add_item("Orange", 0.7, 80)
    print("Sample items added successfully.")

    # Step 4: Retrieve and display items
    print("\nFetching inventory details...")
    items = get_items()
    print("Current Inventory:")
    for item in items:
        print(f"ID: {item[0]}, Name: {item[1]}, Price: {item[2]}, Stock: {item[3]}")

if __name__ == "__main__":
    main()

!ls

# Commented out IPython magic to ensure Python compatibility.
# %%writefile database.py
# def init_db():
#     print("Database initialized!")
# 
# def add_item(name, price, stock):
#     print(f"Item added: {name}, Price: {price}, Stock: {stock}")
# 
# def get_items():
#     return [(1, "Apple", 0.5, 100), (2, "Banana", 0.3, 150), (3, "Orange", 0.7, 80)]
#

# Commented out IPython magic to ensure Python compatibility.
# %%writefile encryption.py
# def generate_key():
#     print("Key generated!")
# 
# def load_key():
#     print("Key loaded!")
#

!ls

!python app.py

# Commented out IPython magic to ensure Python compatibility.
# %cd /path/to/pos_system

!ls

!ls pos_system

# Commented out IPython magic to ensure Python compatibility.
# %cd pos_system

!pwd

!rm -r app.py

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# from database import init_db, add_item, get_items
# from encryption import generate_key, load_key
# 
# def main():
#     # Step 1: Generate encryption key (only run this once)
#     try:
#         generate_key()
#         print("Encryption key generated and saved to 'secret.key'")
#     except FileExistsError:
#         print("Encryption key already exists.")
# 
#     # Step 2: Initialize the database
#     print("\nInitializing database...")
#     init_db()
#     print("Database initialized successfully.")
# 
#     # Step 3: Add sample items to the inventory
#     print("\nAdding sample items to the inventory...")
#     add_item("Apple", 0.5, 100)
#     add_item("Banana", 0.3, 150)
#     add_item("Orange", 0.7, 80)
#     print("Sample items added successfully.")
# 
#     # Step 4: Retrieve and display items
#     print("\nFetching inventory details...")
#     items = get_items()
#     print("Current Inventory:")
#     for item in items:
#         print(f"ID: {item[0]}, Name: {item[1]}, Price: {item[2]}, Stock: {item[3]}")
# 
# if __name__ == "__main__":
#     main()

!ls

!python app.py

!ls

!touch pos_system/__init__.py #Creates an empty __init__.py file within the pos_system folder

!find . -name "database.py"

# Commented out IPython magic to ensure Python compatibility.
# !mkdir -p pos_system  # Ensure the directory exists
# 
# %%writefile pos_system/database.py
# def init_db():
#     print("Database initialized!")
# 
# def add_item(name, price, stock):
#     print(f"Item added: {name}, Price: {price}, Stock: {stock}")
# 
# def get_items():
#     return [(1, "Apple", 0.5, 100), (2, "Banana", 0.3, 150), (3, "Orange", 0.7, 80)]
#

import os

# Ensure the directory exists
os.makedirs('pos_system', exist_ok=True)

# Create the database.py file
database_code = """
def init_db():
    print("Database initialized!")

def add_item(name, price, stock):
    print(f"Item added: {name}, Price: {price}, Stock: {stock}")

def get_items():
    return [(1, "Apple", 0.5, 100), (2, "Banana", 0.3, 150), (3, "Orange", 0.7, 80)]
"""

# Write to pos_system/database.py
with open('pos_system/database.py', 'w') as f:
    f.write(database_code)

print("database.py created successfully!")

!ls pos_system

!ls
!ls pos_system

import sys
import os
sys.path.append(os.path.abspath("pos_system"))

from database import init_db, add_item, get_items

try:
    from pos_system.database import init_db, add_item, get_items
    print("Module imported successfully!")
except ModuleNotFoundError as e:
    print(f"Error: {e}")

def init_db():
    conn = sqlite3.connect("pos.db")
    cursor = conn.cursor()
    # Create items table
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS items (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        price REAL NOT NULL,
        stock INTEGER NOT NULL,
        encrypted_data TEXT NOT NULL
    )
    """)
    # Create sales table
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS sales (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        item_id INTEGER NOT NULL,
        quantity INTEGER NOT NULL,
        total REAL NOT NULL,
        timestamp TEXT NOT NULL,
        FOREIGN KEY (item_id) REFERENCES items (id)
    )
    """)
    conn.commit()
    conn.close()

# Record a sale
def record_sale(item_id: int, quantity: int):
    conn = sqlite3.connect("pos.db")
    cursor = conn.cursor()

    # Get item details
    cursor.execute("SELECT stock, price FROM items WHERE id = ?", (item_id,))
    item = cursor.fetchone()
    if not item:
        print("Item not found!")
        conn.close()
        return False

    stock, price = item
    if stock < quantity:
        print("Insufficient stock!")
        conn.close()
        return False

    # Calculate total and update stock
    total = price * quantity
    new_stock = stock - quantity
    cursor.execute("UPDATE items SET stock = ? WHERE id = ?", (new_stock, item_id))

    # Record sale in sales table
    from datetime import datetime
    timestamp = datetime.now().isoformat()
    cursor.execute("INSERT INTO sales (item_id, quantity, total, timestamp) VALUES (?, ?, ?, ?)",
                   (item_id, quantity, total, timestamp))

    conn.commit()
    conn.close()
    print(f"Sale recorded: Item ID {item_id}, Quantity {quantity}, Total {total:.2f}")
    return True

def record_sale(item_id: int, quantity: int):
    conn = sqlite3.connect("pos.db")
    cursor = conn.cursor()

    # Display inventory before sale
    print("\nInventory Before Sale:")
    cursor.execute("SELECT id, name, stock FROM items")
    items = cursor.fetchall()
    for item in items:
        print(f"ID: {item[0]}, Name: {item[1]}, Stock: {item[2]}")

    # Get item details for the sale
    cursor.execute("SELECT stock, price FROM items WHERE id = ?", (item_id,))
    item = cursor.fetchone()
    if not item:
        print("Item not found!")
        conn.close()
        return False

    stock, price = item
    if stock < quantity:
        print("Insufficient stock!")
        conn.close()
        return False

    # Calculate total and update stock
    total = price * quantity
    new_stock = stock - quantity
    cursor.execute("UPDATE items SET stock = ? WHERE id = ?", (new_stock, item_id))

    # Record sale in sales table
    from datetime import datetime
    timestamp = datetime.now().isoformat()
    cursor.execute("INSERT INTO sales (item_id, quantity, total, timestamp) VALUES (?, ?, ?, ?)",
                   (item_id, quantity, total, timestamp))

    conn.commit()

    # Display inventory after sale
    print("\nInventory After Sale:")
    cursor.execute("SELECT id, name, stock FROM items")
    items = cursor.fetchall()
    for item in items:
        print(f"ID: {item[0]}, Name: {item[1]}, Stock: {item[2]}")

    conn.close()
    print(f"\nSale recorded: Item ID {item_id}, Quantity {quantity}, Total {total:.2f}")
    return True

def add_sample_items():
    conn = sqlite3.connect("pos.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO items (name, price, stock, encrypted_data) VALUES (?, ?, ?, ?)",
                   ("Apple", 0.5, 100, ""))
    cursor.execute("INSERT INTO items (name, price, stock, encrypted_data) VALUES (?, ?, ?, ?)",
                   ("Banana", 0.3, 150, ""))
    cursor.execute("INSERT INTO items (name, price, stock, encrypted_data) VALUES (?, ?, ?, ?)",
                   ("Orange", 0.7, 80, ""))
    conn.commit()
    conn.close()
    print("Sample items added successfully!")

def main():
    init_db()
    add_sample_items()

    while True:
        print("\n--- Menu ---")
        print("1. Record a Sale")
        print("2. Exit")
        choice = input("Enter your choice: ")

        if choice == "1":
            item_id = int(input("Enter Item ID to sell: "))
            quantity = int(input("Enter Quantity to sell: "))
            record_sale(item_id, quantity)
        elif choice == "2":
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()

# Commented out IPython magic to ensure Python compatibility.
# %%writefile pos_system/app.py
# import os
# import sqlite3
# from cryptography.fernet import Fernet
# from datetime import datetime
# from dotenv import load_dotenv
# 
# # Import your database and encryption modules
# from pos_system.database import init_db, add_item, get_items, record_sale, add_sample_items  # Corrected import paths
# from pos_system.encryption import generate_key, load_key
# 
# 
# load_dotenv()
# key = os.getenv("SECRET_KEY")
# 
# # Check if SECRET_KEY is set and not empty
# if key is None or key == "":
#     # If not set, generate a new key and store it as an environment variable
#     key = Fernet.generate_key()
#     os.environ["SECRET_KEY"] = key.decode()  # Store key as a string in environment variable
#     # Consider saving the key to a .env file for persistence across sessions
#     with open(".env", "a") as env_file:
#         env_file.write(f"SECRET_KEY={key.decode()}\n")
#     print("New SECRET_KEY generated and stored in .env file.")
# 
# # Initialize Fernet
# cipher_suite = Fernet(key)  # Now, 'key' should be a valid bytes-like object or ASCII string
# 
# 
# def main():
#     init_db()
#     add_sample_items()
# 
#     while True:
#         print("\n--- Menu ---")
#         print("1. Record a Sale")
#         print("2. Exit")
#         choice = input("Enter your choice: ")
# 
#         if choice == "1":
#             item_id = int(input("Enter Item ID to sell: "))
#             quantity = int(input("Enter Quantity to sell: "))
#             record_sale(item_id, quantity)
#         elif choice == "2":
#             print("Exiting...")
#             break
#         else:
#             print("Invalid choice. Please try again.")
# 
# if __name__ == "__main__":
#     main()

pip freeze > requirements.txt

# prompt: I want to generate pip install -r requirements.txt

!pip install cryptography
!pip install python-dotenv
!pip install pysqlite3

# prompt: I want to generate from flask import Flask, jsonify
# app = Flask(__name__)
# @app.route("/inventory", methods=["GET"])
# def get_inventory():
#     items = get_items()
#     return jsonify(items)
# if __name__ == "__main__":
#     app.run(debug=True)

from flask import Flask, jsonify
from pos_system.database import get_items  # Assuming get_items is in database.py

app = Flask(__name__)

@app.route("/inventory", methods=["GET"])
def get_inventory():
    items = get_items()
    return jsonify(items)

if __name__ == "__main__":
    app.run(debug=True)